#include <Arduino.h>
#include <ESP32-TWAI-CAN.hpp>  

#define CAN_TX 22
#define CAN_RX 21

CanFrame rxFrame;

// Structure globale pour stocker les données BMS
struct BmsData {
  float totalVoltage = -1;
  float gatherVoltage = -1;
  float current = -1;
  float soc = -1;

  uint16_t maxCellVoltage = 0;
  uint8_t maxCellNumber = 0;
  uint16_t minCellVoltage = 0;
  uint8_t minCellNumber = 0;

  int8_t maxTemp = -100;
  int8_t minTemp = -100;

  uint64_t errorStatus = 0;
};

BmsData bmsData24V;

void setup() {
  Serial.begin(115200);
  ESP32Can.setPins(CAN_TX, CAN_RX);
  ESP32Can.setRxQueueSize(5);
  ESP32Can.setTxQueueSize(5);
  ESP32Can.setSpeed(ESP32Can.convertSpeed(250));

  if (ESP32Can.begin()) {
    Serial.println("CAN bus started!");
  } else {
    Serial.println("CAN bus failed!");
  }
}

void loop() {
  sendBms24VRequest(0x18900140);
  sendBms24VRequest(0x18910140);
  sendBms24VRequest(0x18920140);
  sendBms24VRequest(0x18980140);

  receiveBms24VResponse(0x18904001);
  receiveBms24VResponse(0x18914001);
  receiveBms24VResponse(0x18924001);
  receiveBms24VResponse(0x18984001);

  // Affichage global des données stockées
  Serial.println("====== Données BMS ======");
  Serial.print("Tension totale: "); Serial.print(bmsData24V.totalVoltage); Serial.println(" V");
  Serial.print("Tension collectée: "); Serial.print(bmsData24V.gatherVoltage); Serial.println(" V");
  Serial.print("Courant: "); Serial.print(bmsData24V24V.current); Serial.println(" A");
  Serial.print("SOC: "); Serial.print(bmsData24V.soc); Serial.println(" %");

  Serial.print("Cellule max: "); Serial.print(bmsData24V.maxCellVoltage); Serial.print(" mV (N° ");
  Serial.print(bmsData24V.maxCellNumber); Serial.println(")");
  Serial.print("Cellule min: "); Serial.print(bmsData24V.minCellVoltage); Serial.print(" mV (N° ");
  Serial.print(bmsData24V.minCellNumber); Serial.println(")");

  Serial.print("Température max: "); Serial.print(bmsData24V.maxTemp); Serial.println(" °C");
  Serial.print("Température min: "); Serial.print(bmsData24V.minTemp); Serial.println(" °C");

  Serial.print("Statut erreurs: 0x"); Serial.println(bmsData24V.errorStatus, HEX);
  Serial.println("==========================");

  delay(1000);
}

void sendBms24VRequest(uint32_t identifier) {
  CanFrame frame;
  frame.identifier = identifier;
  frame.extd = 1;
  frame.data_length_code = 8;
  memset(frame.data, 0, 8);

  if (ESP32Can.writeFrame(frame, 1000)) {
    Serial.print("Requête envoyée : ID = 0x");
    Serial.println(identifier, HEX);
  } else {
    Serial.println("Échec de l'envoi de la requête CAN");
  }
}

bool receiveBmsResponse(uint32_t expectedID) {
  CanFrame frame;
  if (ESP32Can.readFrame(frame, 1000)) {
    if (frame.identifier == expectedID && frame.data_length_code == 8) {
      processReceivedData(frame.data, frame.identifier);
      return true;
    }
  }
  return false;
}



void processReceivedData(uint8_t* data, uint32_t identifier) {
  switch (identifier) {
    case 0x18904001:
      bmsData24V.totalVoltage = ((data[0] << 8) | data[1]) * 0.1;
      bmsData24V.gatherVoltage = ((data[2] << 8) | data[3]) * 0.1;
      bmsData24V.current = (((data[4] << 8) | data[5]) - 30000) * 0.1;
      bmsData24V.soc = (data[6] == 0xFF && data[7] == 0xFF) ? -1 : ((data[6] << 8) | data[7]) * 0.1;
      break;

    case 0x18914001:
      bmsData24V.maxCellVoltage = (data[0] << 8) | data[1];
      bmsData24V.maxCellNumber = data[2];
      bmsData24V.minCellVoltage = (data[3] << 8) | data[4];
      bmsData24V.minCellNumber = data[5];
      break;

    case 0x18924001:
      bmsData24V.maxTemp = data[0] - 40;
      bmsData24V.minTemp = data[2] - 40;
      break;

    case 0x18984001:
      bmsData24V.errorStatus = 0;
      for (int i = 0; i < 8; i++) {
        bmsData24V.errorStatus |= ((uint64_t)data[i] << (8 * i));
      }
      break;
  }
}
