#include <ESP32-TWAI-CAN.hpp>

// Définition des broches CAN (modifiables si nécessaire)
#define CAN_TX 5
#define CAN_RX 4

// Instance pour les trames reçues
CanFrame rxFrame;

//----------------------------------------------------------------------
// Fonction : Envoi de la trame RX_CONTROL (ID 0x50)
//----------------------------------------------------------------------
void sendControlFrame() {
    CanFrame controlFrame = {0};
    controlFrame.identifier = 0x50;  // ID 80 en décimal
    controlFrame.extd = 0;           // trame standard (11 bits)
    controlFrame.data_length_code = 4;  // 4 octets

    uint16_t current_command = 0;      // Commande de courant (0A ici)
    uint8_t configuration_request = 1; // Demande de configuration
    uint8_t relay_command = 0;         // Commande du relais (0 ici)

    // Remplissage des octets (little-endian)
    controlFrame.data[0] = current_command & 0xFF;
    controlFrame.data[1] = (current_command >> 8) & 0xFF;
    controlFrame.data[2] = configuration_request;
    controlFrame.data[3] = relay_command;

    ESP32Can.writeFrame(controlFrame);
    Serial.println("Trame RX_CONTROL envoyée (ID 0x50)");
}

//----------------------------------------------------------------------
// Fonction : Décodage de la trame TX_INFORMATIONS (ID 0x51)
//----------------------------------------------------------------------
void decodeTxInformations(const CanFrame &frame) {
    // Décodage des signaux selon votre documentation
    uint8_t current_setting_request = frame.data[0];
    uint8_t current = frame.data[1];
    int16_t internal_temp_raw = (int16_t)(frame.data[2] | (frame.data[3] << 8)); // Température brute
    float internal_temperature = internal_temp_raw * 0.1;                        // Conversion en °C
    uint8_t relay = frame.data[4] & 0x01;                                       // bit 0
    uint8_t overtemp_flag = (frame.data[4] >> 1) & 0x01;                        // bit 1

    // Affichage des données interprétées
    Serial.println("----- TX_INFORMATIONS -----");
    Serial.printf("Current Setting Request : %d A\n", current_setting_request); // Requête courant
    Serial.printf("Current                 : %d A\n", current);                 // Courant mesuré
    Serial.printf("Internal Temperature    : %.1f °C\n", internal_temperature); // Température interne
    Serial.printf("Relay                   : %d\n", relay);                     // État du relais
    Serial.printf("Overtemperature Flag    : %d\n", overtemp_flag);             // Erreur de surchauffe
    Serial.println("---------------------------");
}

//----------------------------------------------------------------------
// Fonction : Décodage de la trame TX_CONFIG (ID 0x52)
//----------------------------------------------------------------------
//----------------------------------------------------------------------
// Fonction : Décodage de la trame TX_CONFIG (ID 0x52)
//----------------------------------------------------------------------
void decodeTxConfig(const CanFrame &frame) {
    // Décodage des signaux
    uint8_t can_bitrate = frame.data[0];
    uint8_t number_dcdc = frame.data[1];
    uint8_t ramp_setting = frame.data[2];
    uint8_t current_limit_setting = frame.data[3];
    uint16_t max_current_raw = frame.data[4] | (frame.data[5] << 8);
    float max_current = max_current_raw * 0.01; // Conversion en ampères (plage de 0 à 55)

    uint8_t software_number = frame.data[6];

    // Conversion CAN Bitrate
    String bitrate;
    if (can_bitrate == 1) {
        bitrate = "250 kbits/s";
    } else if (can_bitrate == 2) {
        bitrate = "500 kbits/s";
    } else {
        bitrate = "125 kbits/s (défaut)";
    }

    // Conversion Ramp Setting
    String ramp_description;
    switch (ramp_setting) {
        case 0: ramp_description = "0.5 A/s"; break;
        case 1: ramp_description = "0.2 A/s"; break;
        case 2: ramp_description = "0.1 A/s"; break;
        case 3: ramp_description = "1 A/s"; break;
        case 4: ramp_description = "2 A/s"; break;
        case 5: ramp_description = "5 A/s"; break;
        case 6: ramp_description = "Pas de ramping (No ramp)"; break;
        default: ramp_description = "Valeur inconnue"; break;
    }

    // Affichage des données interprétées
    Serial.println("----- TX_CONFIG -----");
    Serial.printf("CAN Bitrate           : %s\n", bitrate.c_str());
    Serial.printf("Number DCDC           : %d\n", number_dcdc);
    Serial.printf("Ramp Setting          : %s\n", ramp_description.c_str());
    Serial.printf("Current Limit Setting : %d A\n", current_limit_setting);
    Serial.printf("Max Current           : %.2f A\n", max_current);
    Serial.printf("Software Number       : %d\n", software_number);
    Serial.println("---------------------");
}

void setup() {
    // Démarrage de la communication série pour le débogage
    Serial.begin(115200);
    Serial.println("Initialisation...");

    // Configuration des broches CAN
    ESP32Can.setPins(CAN_TX, CAN_RX);
    ESP32Can.setRxQueueSize(10); // Augmentation de la taille de la file RX
    ESP32Can.setTxQueueSize(10); // Augmentation de la taille de la file TX

    // Initialisation du bus CAN à 250 kb/s
    if (ESP32Can.begin(ESP32Can.convertSpeed(250), CAN_TX, CAN_RX, 10, 10)) {
        Serial.println("Bus CAN démarré à 250 kb/s");
    } else {
        Serial.println("Erreur lors du démarrage du bus CAN");
    }
}

void loop() {
    static uint32_t lastSendTime = 0;
    uint32_t currentTime = millis();

    // Envoi de la trame RX_CONTROL toutes les secondes
    if (currentTime - lastSendTime >= 1000) {
        lastSendTime = currentTime;
        sendControlFrame();
    }

    // Lecture des trames entrantes
    if (ESP32Can.readFrame(rxFrame, 10)) {
        // Vérification de l'ID de la trame reçue
        if (rxFrame.identifier == 0x51) { // TX_INFORMATIONS
            decodeTxInformations(rxFrame);
        } else if (rxFrame.identifier == 0x52) { // TX_CONFIG
            decodeTxConfig(rxFrame);
        }
    }
}
