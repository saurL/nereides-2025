#include <ESP32-TWAI-CAN.hpp>

#define CAN_TX      5
#define CAN_RX      4

// IDs des trames CAN
#define COMMAND_FRAME_ID      0x050  // Commande -> convertisseur
#define INFO_FRAME_ID         0x051  // Réponse convertisseur
#define CONFIG_FRAME_ID       0x052  // Nouvelle trame de configuration

// Paramètres
#define TARGET_CURRENT        55     // 55A (valeur cible)
#define TEMP_CRITICAL         80     // Arrêt à 80°C
#define TEMP_THRESHOLD        70     // Réduction à 70°C
#define CURRENT_DECREMENT     5      // Pas de réduction
#define TEMP_CHECK_DELAY      2000   // Vérif toutes les 2s

// Structure pour stocker la configuration reçue (trame 0x052)
typedef struct {
    uint8_t baudrate;          // Octet 0 : 1=125kbps, 2=250kbps, 3=500kbps
    uint8_t numberDCDC;        // Octet 1 : Nombre de convertisseurs
    uint8_t rampSetting;       // Octet 2 : Température des convertisseurs (?)
    uint8_t currentLimit;      // Octet 3 : Limite de courant actuelle (A)
    uint16_t maxCurrent;       // Octets 4-5 : Limite max de courant (A)
    uint8_t softwareRevision;  // Octet 6 : Version du logiciel
} ConfigData;

ConfigData systemConfig;  // Variable globale pour la configuration
bool configRequested = false;  // True si on a demandé la config (octet 3 de 0x050)

CanFrame rxFrame;
uint16_t currentCommand = TARGET_CURRENT;
uint16_t internalTemp = 0;
bool overTempFlag = false;

// Envoi d'une commande de courant (avec gestion du booléen de demande de config)
void sendCurrentCommand(uint16_t current, bool requestConfig = false) {
    CanFrame frame = {0};
    frame.identifier = COMMAND_FRAME_ID;
    frame.extd = 0;
    frame.data_length_code = 4;
    
    frame.data[0] = current & 0xFF;         // LSB (octet 0)
    frame.data[1] = (current >> 8) & 0xFF;  // MSB (octet 1)
    frame.data[2] = 0;                       // Réservé (octet 2)
    frame.data[3] = requestConfig ? 1 : 0;   // Octet 3 : Demande de config (booléen)
    
    ESP32Can.writeFrame(frame);
    Serial.printf("[CAN] Envoi commande : %dA | Demande config : %d\n", 
                 current, requestConfig);
}

// Fonction pour demander la configuration (met l'octet 3 de 0x050 à 1)
void requestConfiguration() {
    configRequested = true;
    sendCurrentCommand(currentCommand, true);  // Envoi avec demande de config
}

void setup() {
    Serial.begin(115200);
    ESP32Can.setPins(CAN_TX, CAN_RX);
    if (!ESP32Can.begin(ESP32Can.convertSpeed(250))) {
        Serial.println("[ERREUR] Échec du bus CAN !");
        while(1);
    }
    Serial.println("[CAN] Bus démarré !");
    sendCurrentCommand(TARGET_CURRENT);  // Envoi initial à 55A
}

void loop() {
    static uint32_t lastTempCheck = 0;
    uint32_t currentTime = millis();

    // Lecture des trames CAN
    if (ESP32Can.readFrame(rxFrame, 100)) {
        if (rxFrame.identifier == INFO_FRAME_ID) {
            // Trame 0x051 (infos standard)
            internalTemp = (rxFrame.data[2] << 8) | rxFrame.data[3];
            overTempFlag = (rxFrame.data[4] & 0x02) >> 1;
            Serial.printf("[CAN] Reçu - Temp: %d°C\n", internalTemp);
        }
        else if (rxFrame.identifier == CONFIG_FRAME_ID && configRequested) {
            // Trame 0x052 (config) reçue après demande
            systemConfig.baudrate = rxFrame.data[0];
            systemConfig.numberDCDC = rxFrame.data[1];
            systemConfig.rampSetting = rxFrame.data[2];
            systemConfig.currentLimit = rxFrame.data[3];
            systemConfig.maxCurrent = (rxFrame.data[4] << 8) | rxFrame.data[5];
            systemConfig.softwareRevision = rxFrame.data[6];

            Serial.println("[CONFIG] Données reçues :");
            Serial.printf("  - Baudrate: %d (1=125kbps, 2=250kbps, 3=500kbps)\n", systemConfig.baudrate);
            Serial.printf("  - Nombre de DCDC: %d\n", systemConfig.numberDCDC);
            Serial.printf("  - Ramp setting: %d°C\n", systemConfig.rampSetting);
            Serial.printf("  - Current limit: %dA\n", systemConfig.currentLimit);
            Serial.printf("  - Max current: %dA\n", systemConfig.maxCurrent);
            Serial.printf("  - Software revision: v%d\n", systemConfig.softwareRevision);

            configRequested = false;  // Reset du flag après réception
            sendCurrentCommand(currentCommand, false);  // Ré-envoi sans demande de config
        }
    }

    // Gestion thermique (identique)
    if (currentTime - lastTempCheck >= TEMP_CHECK_DELAY) {
        lastTempCheck = currentTime;
        if (internalTemp > TEMP_THRESHOLD && currentCommand > 0) {
            currentCommand = max(currentCommand - CURRENT_DECREMENT, 0);
            sendCurrentCommand(currentCommand);
        } 
        else if (internalTemp <= TEMP_THRESHOLD && currentCommand < TARGET_CURRENT) {
            currentCommand = TARGET_CURRENT;
            sendCurrentCommand(currentCommand);
        }
    }

    // Arrêt d'urgence (identique)
    if (internalTemp >= TEMP_CRITICAL || overTempFlag) {
        Serial.println("[URGENCE] Arrêt pour surchauffe !");
        sendCurrentCommand(0);
        while(1);
    }

    // Exemple : Demander la config toutes les 30s (pour test)
    static uint32_t lastConfigRequest = 0;
    if (currentTime - lastConfigRequest >= 30000) {
        lastConfigRequest = currentTime;
        requestConfiguration();
    }
}
